#!/bin/bash
# This script Interactively list users and their public keys that the SSH server
# accepts for Public Key Authentication. It then allows you to delete a specific
# public key.

USERNAME=""
# If username is passed as argument, check if it exists and proceed
id "$1" &> /dev/null
if [[ $? == 0 ]]; then
  USERNAME=$(id -nu $1)
else

  # Create array of users in system
  u_count=0
  for u_dir in /home/*; do
    u_options[$u_count]=$(echo $u_dir | sed 's_/\home\/__')
    ((u_count++))
  done

    echo "Choose the username whose public key that you want to delete: (1-$(((${#u_options[@]}+1))))?"
  select u_name in "${u_options[@]}" "EXIT/QUIT" ; do
    if (( REPLY == 1 + ${#u_options[@]} )) ; then
        exit
    elif (( REPLY > 0 && REPLY <= ${#u_options[@]} )) ; then
        USERNAME=$u_name
        break
    else
        echo "Invalid option. Try again."
    fi
  done
fi

echo "For user: $USERNAME, listing public keys..."

# Check is authorized_keys file is present
if [[ ! -f "/home/$USERNAME/.ssh/authorized_keys" ]]; then
  echo "WARNING: $USERNAME's authorized_keys file does not exist."
  echo "No public keys present for deletion."

# List public keys in authorized_keys
else
  pkey_count=0;
  while read pkey_line; do
    # Check is key CONTAINS "ssh-" and CONTAINS "=="
    if [[ $pkey_line =~ .*ssh\-.*==.* ]]; then
      # Extract key bits
      pkey_opts_bits[$pkey_count]=$(echo $pkey_line | sed 's_^.*ssh\-_ssh\-_' | sed 's_==.*_==_')
      # Extract key comment
      pkey_opts_comment[$pkey_count]=$(echo $pkey_line | sed 's_^.*==__' | sed 's_^\ __' )
      # If key contains no comment
      if [[ -z ${pkey_opts[$pkey_count]} ]]; then
        pkey_opts[$pkey_count]="Missing Comment"
      fi
      ((pkey_count++))
    fi
  done < "/home/$USERNAME/.ssh/authorized_keys"
fi
