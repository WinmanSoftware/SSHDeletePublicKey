#!/bin/bash
# This script Interactively list users and their public keys that the SSH server
# accepts for Public Key Authentication. It then allows you to delete a specific
# public key.

USERNAME=""
# If username is passed as argument, check if it exists and proceed
id "$1" &> /dev/null
if [[ $? == 0 ]]; then
  USERNAME=$(id -nu $1)
else

  # Create array of users in system
  u_count=0
  for u_dir in /home/*; do
    u_options[$u_count]=$(echo $u_dir | sed 's_/\home\/__')
    ((u_count++))
  done

  echo "Choose the username whose public key that you want to delete: (1-$(((${#u_options[@]}+1))))?"
  select u_name in "${u_options[@]}" "## EXIT/QUIT ##" ; do
    if (( REPLY == 1 + ${#u_options[@]} )) ; then
      exit
    elif (( REPLY > 0 && REPLY <= ${#u_options[@]} )) ; then
      USERNAME=$u_name
      break
    else
      echo "Invalid option, try again"
    fi
  done
fi

echo "For user: $USERNAME, listing public keys..."

# Check if authorized_keys file is present
if [[ ! -f "/home/$USERNAME/.ssh/authorized_keys" ]]; then
  echo "ERROR: $USERNAME's authorized_keys file does not exist"
  echo "No public keys present for deletion"

# List public keys in authorized_keys
else
  pkey_count=0;
  while read pkey_line; do
    # Check if key CONTAINS "ssh-" and CONTAINS "=="
    if [[ $pkey_line =~ .*ssh\-.*==.* ]]; then
      # Extract key bits
      pkey_opts_bits[$pkey_count]=$(echo $pkey_line | sed 's_^.*ssh\-_ssh\-_' | sed 's_==.*_==_')
      # Extract key comment
      pkey_opts_comment[$pkey_count]=$(echo $pkey_line | sed 's_^.*==__' | sed 's_^\ __' )
      # If key contains no comment
      if [[ -z ${pkey_opts_comment[$pkey_count]} ]]; then
        pkey_opts_comment[$pkey_count]="*** Missing Comment ***"
      fi
      ((pkey_count++))
    fi
  done < "/home/$USERNAME/.ssh/authorized_keys"
  # If no public keys are present in authorized_keys
  if [[ pkey_count -eq 0 ]]; then
    echo "ERROR: NO public keys present in authorized_keys for $USERNAME"
    echo "No public keys present for deletion"

  else

    # Show comments of public keys that can be deleted
    echo "Choose public key to be deleted: (1-$(((${#pkey_opts_comment[@]}+1))))?"
    select pkey_del_comment in "${pkey_opts_comment[@]}" "## EXIT/QUIT ##" ; do
      if (( REPLY == 1 + ${#pkey_opts_comment[@]} )) ; then
        exit
      elif (( REPLY > 0 && REPLY <= ${#pkey_opts_comment[@]} )) ; then
        pkey_del_bits=${pkey_opts_bits[(($REPLY-1))]}
        echo "  Are you sure you want to delete the following key?"
        echo "    Username: $USERNAME"
        echo "    Key: $pkey_del_bits"
        echo "    Comment: $pkey_del_comment"
        echo "  This process is IRREVERISIBLE. Delete public key?"
        select yn in "Yes" "No" ; do
          case $yn in
            Yes )
              # Delete if new_authorized_keys exits
              if [[ -e "/home/$USERNAME/.ssh/new_authorized_keys" ]]; then
                rm "/home/$USERNAME/.ssh/new_authorized_keys"
              fi
              # Write existing contents of authorized_keys to new_authorized_keys
              #  while skipping the key that is to be deleted
              while read pkey_del_line; do
                if [[ ! "$pkey_del_line" == *"$pkey_del_bits"* ]]; then
                  echo "$pkey_del_line" >> "/home/$USERNAME/.ssh/new_authorized_keys"
                fi
              done < "/home/$USERNAME/.ssh/authorized_keys"

              # Swap authorized_keys and new_authorized_keys
              rm "/home/$USERNAME/.ssh/authorized_keys"
              mv "/home/$USERNAME/.ssh/new_authorized_keys" "/home/$USERNAME/.ssh/authorized_keys"

              # Fix file permissions
              chmod 600 "/home/$USERNAME/.ssh/authorized_keys"
              chown --quiet "$USERNAME" "/home/$USERNAME/.ssh/authorized_keys"

              echo "SUCCESS: Key succesfully deleted"
              break;;
            * )
              echo "Exiting without any modifications"
              break ;;
          esac
        done
        break
      else
          echo "Invalid option, try again"
      fi
    done
  fi
fi
